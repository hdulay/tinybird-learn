#!/usr/bin/env python

import osquery
import json
import sys
import os
import traceback
from dotenv import load_dotenv
import requests
from datetime import datetime

@osquery.register_plugin
class ConfigPlugin(osquery.ConfigPlugin):
    """Example config plugin"""

    def name(self):
        return "osquery_config"
    
    def content(self):
        return [
            {
                "source_one": json.dumps({
                    "schedule": {
                        "time_1": {
                            "query": "SELECT * FROM processes",
                            "interval": 1,
                        },
                    },
                }),
            }
        ]

@osquery.register_plugin
class LoggerPlugin(osquery.LoggerPlugin):
    """Example logger plugin"""

    def __init__(self):
        load_dotenv('.env')

    def name(self):
        return "tb_logger"

    def log_string(self, value):
        try:
            self.send(value)
            return osquery.extensions.ttypes.ExtensionStatus(code=0, message="OK")
            
        except:
            print ("Unexpected error:", sys.exc_info()[0])
            traceback.print_exc()
            raise

    def send(self, data):
        data_source =  os.getenv('DS')
        token =  os.getenv('TOKEN')
        data_dict = json.loads(data)
        data_dict['calendarTime'] = datetime.strptime(
            data_dict['calendarTime'],
            "%a %b %d %H:%M:%S %Y %Z").strftime("%Y-%m-%dT%H:%M:%SZ")

        print(data_dict)
        r = requests.post('https://api.us-east.tinybird.co/v0/events', 
            params = {
                'name': data_source,
                'token': token,
            }, 
            data=json.dumps(data_dict)
        )

        print(r.status_code)
        print(r.text)
        return r.status_code

if __name__ == "__main__":
    osquery.start_extension(
        name="osquery_tinybird",
        version="1.0.0",)
